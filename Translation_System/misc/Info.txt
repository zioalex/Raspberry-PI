### Requirements PORT 8888 for jicofo
If the port is busy everything seems to starts but the participand cannot see each others!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


https://github.com/jitsi/jitsi-meet/issues/6449

apt install openjdk-8-jdk-headless openjdk-8-jre openjdk-8-jre-headless openjdk-8-jdk

update-alternatives --config java


Open /etc/jitsi/videobridge/config:

sudo nano /etc/jitsi/videobridge/config

and add line:

VIDEOBRIDGE_MAX_MEMORY=1024m

Save by pressing ctrl+x, ctrl+y and enter when prompted.
3.7. Experimental: Adjust the Memory Limits on Jicofo (armhf)

Open jicofo.sh:

sudo nano /usr/share/jicofo/jicofo.sh

and change:

exec java -Xmx3072m -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/tmp $LOGGING_CONFIG_PARAM $JAVA_SYS_PROPS -cp $cp $mainClass $@

to:

exec java -Xmx1024m -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/tmp $LOGGING_CONFIG_PARAM $JAVA_SYS_PROPS -cp $cp $mainClass $@

Save by pressing ctrl+x, ctrl+y and enter when prompted.

OR BETTER
add the line JICOFO_MAX_MEMORY="1024m" in the file /etc/jitsi/jicofo/config and restart jicofo


https://gist.github.com/krithin/e50a6001c8435e46cb85f5c6c78e2d66


mkdir -p /root/jitsi/jitsi-sctp/jniwrapper/native/src/main/resources/lib/linux-arm/

cp ./jniwrapper/native/target/libjnisctp-linux-arm.so ./jniwrapper/native/src/main/resources/lib/linux-arm/libjnisctp.so

sudo cp ./jniwrapper/native/target/jniwrapper-native-1.0-SNAPSHOT.jar /usr/share/jitsi-videobridge/lib/



## Jitsi customization
/etc/jitsi/meet/translation.home.local-config.js

Jibri requirements:

apt install linux-image-extra-virtual

flash-kernel --force 5.15.0-48-generic # needed to have the alsa loop
It doesn't work on raspi

# I need to recompile with the snd-aloop module

sudo apt install git bc bison flex libssl-dev make
apt install linux-raspi-tools-5.15.0-1015
apt install dpkg-dev # Needed to download the source

# enable the source package
deb-src http://ports.ubuntu.com/ubuntu-ports jammy main restricted

sudo apt-get source linux-image-$(uname -r)
sudo apt-get build-dep linux-image-$(uname -r)

# May be I found the additional audio module
apt install linux-modules-extra-5.15.0-1015-raspi
rm /lib/systemd/system/alsa-utils.service ; systemctl daemon-reload
apt install unzip ffmpeg curl alsa-utils icewm xdotool  xserver-xorg-video-dummy

# Chrome is not compiled anymore for RaspPI - using chromium
curl https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo sh -c 'gpg --dearmor > /usr/share/keyrings/google-chrome-keyring.gpg'
echo "deb [arch=amd64 signed-by=/usr/share/keyrings/google-chrome-keyring.gpg] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
apt-get -y update
apt-get -y install google-chrome-stable

apt install chromium-browser chromium-driver # NOP it uses snap

https://askubuntu.com/questions/1204571/how-to-install-chromium-without-snap
https://packages.debian.org/bullseye/arm64/apt/download

JICOFO_MAX_MEMORY Adapted to run on Raspberry Pi 4

	/etc/apt/sources.list.d/debian.list
		deb [arch=arm64] http://ftp.ch.debian.org/debian bullseye main 
		deb [arch=arm64] http://ftp.ch.debian.org/debian bullseye-updates main 

	sudo apt remove chromium-browser chromium-browser-l10n chromium-codecs-ffmpeg-extra
	sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys CC9673A4F27B8DD47936 62A9605C66F00D6C9793 # 11/bullseye
	sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys BCDDDC30D7C23CBBABEE # 10/buster Maybe

	vi /etc/apt/preferences.d/chromium.pref
		# Note: 2 blank lines are required between entries
		Package: *
		Pin: release a=eoan
		Pin-Priority: 500

	
		Package: *
		Pin: origin "deb.debian.org"
		Pin-Priority: 300


		# Pattern includes 'chromium', 'chromium-browser' and similarly
		# named dependencies:
		Package: chromium*
		Pin: origin "deb.debian.org"
		Pin-Priority: 700	

	apt update && apt install chromium/stable chromium-driver/stable

	
	mkdir -p /etc/opt/chrome/policies/managed
	echo '{ "CommandLineFlagSecurityWarningsEnabled": false }' >>/etc/opt/chrome/policies/managed/managed_policies.json

	sudo apt-get install default-jre-headless ffmpeg curl alsa-utils icewm xdotool xserver-xorg-video-dummy ruby-hocon

	sudo usermod -aG adm,audio,video,plugdev jibri


	# prosody config
	prosodyctl register jibri auth.translation.home.local jibriauthpass
	prosodyctl register recorder recorder.translation.home.local jibrirecorderpass

	ln -s /etc/opt/chrome/policies/ /etc/chromium/ # config for chrome and Chromium are stored in different placeS

https://www.linuxcapable.com/how-to-install-chromium-browser-on-ubuntu-22-04-lts/
I need a plain installation to customize it. True?
See APT Method with PPA
sudo add-apt-repository ppa:savoury1/chromium -y
sudo add-apt-repository ppa:savoury1/ffmpeg4 -y
apt update
apt install google-chrome-stable

# Only audio Jibri version https://github.com/luponata/jibri

install jibri for audio recording?
https://github.com/jitsi/jibri

Jibri requirements:

apt install linux-image-extra-virtual
# Only audio Jibri version https://github.com/luponata/jibri

# Jibri fails to record. Most probably for a error with the SSL cert.
In /var/log/jitsi/jibri/log.0.txt and browser.0.txt
id=13) AC16A1EBFE89EF4D0BF59A3E84E4D942 {           
   "errorText": "net::ERR_CERT_AUTHORITY_INVALID",  
   "frameId": "AC16A1EBFE89EF4D0BF59A3E84E4D942",   
   "loaderId": "89A5EE88A64549017B9A76D19F37CC16"   
}                                                   

netplan.io required to manage the wlan config
prosody service seems to be required
jibri is not needed anymore. The recording is done via python/alsa.


# Asound conf
root@translation:/etc# more asound.conf 
pcm.trans {
    type dsnoop
    ipc_key 5678293
    ipc_perm 0666
    ipc_gid audio
  slave {
        pcm "hw:2,0" 
        channels 2 
        #period_size 1024
        #buffer_size 4096
        #rate 48000
        #periods 0 
        #period_time 0
    }
}


# Jupyter notebook
jupyter notebook --ip 0.0.0.0

# Start the recording


# Pulse audio Record input while used
https://gist.github.com/varqox/c1a5d93d4d685ded539598676f550be8
## Create the output sink called recording
pacmd load-module module-null-sink sink_name=recording sink_properties=device.description=recording

pacmd list-sinks | egrep '^\s+name: .*'
        name: <alsa_output.usb-Creative_Technology_Ltd_Sound_Blaster_Play__3_00252407-00.analog-stereo>
        name: <alsa_output.platform-bcm2835_audio.stereo-fallback>
        name: <alsa_output.platform-bcm2835_audio.stereo-fallback.2>

The first one is the USB Mic

pacmd load-module module-combine-sink sink_name=combined sink_properties=device.description=combined slaves=recording,alsa_output.usb-Creative_Technology_Ltd_Sound_Blaster_Play__3_00252407-00.analog-stereo

# Attach the Mic to the sink
pacmd list-sources | egrep '^\s+name: .*' | grep input
        name: <alsa_input.usb-Creative_Technology_Ltd_Sound_Blaster_Play__3_00252407-00.analog-stereo>

pacmd load-module module-loopback source=alsa_input.usb-Creative_Technology_Ltd_Sound_Blaster_Play__3_00252407-00.analog-stereo sink=recording latency_msec=1

# Recoding links
http://mocha.freeshell.org/audio.html
https://raw.githubusercontent.com/larsimmisch/pyalsaaudio/main/recordtest.py
https://unix.stackexchange.com/questions/361594/device-or-resource-busy-error-thrown-when-trying-to-record-audio-using-arecord
https://bbs.archlinux.org/viewtopic.php?id=187258
https://alsa.opensrc.org/DmixPlugin
https://alsa.opensrc.org/Dsnoop
http://larsimmisch.github.io/pyalsaaudio/libalsaaudio.html#examples

# Set the chromium 
pavucontrol 
On the Playback tab
NOT NEEDED: Loopback from Sound Blaster Play! 3 Analog Stereo on			combined
output deviced recording db 130%
# Record 

# Best recording with the Mic at 5-10cm far from the mouth
parecord --channels=2 -d recording.monitor output.wav

# Link to connect with audio recording activated
https://translation.home.local/english#config.startWithAudioMuted=false&config.startWithVideoMuted=true

VNC Service file
/etc/systemd/system/vncserver.service
[Unit]
Description=TightVNC server
After=syslog.target network.target

[Service]
Type=forking
User=pi
#PAMName=login
PIDFile=/home/pi/.vnc/%H:1.pid
ExecStartPre=-/usr/bin/vncserver -kill :1 > /dev/null 2>&1
ExecStart=/usr/bin/vncserver
ExecStop=/usr/bin/vncserver -kill :1 ; pkill parecord ; pkill pulseaudio

[Install]
WantedBy=multi-user.target

/home/pi/.xsessionrc
pi@translation:~$ cat .xsessionrc
# Works with vncserver
set -x
exec pulseaudio -v --start -D &
exec icewm --replace &
exec pacmd load-module module-null-sink sink_name=recording sink_properties=device.description=recording && \
pacmd load-module module-combine-sink sink_name=combined sink_properties=device.description=combined slaves=recording,alsa_output.usb-Creative_Technology_Ltd_Sound_Blaster_Play__3_00252407-00.analog-stereo && \
pacmd load-module module-loopback source=alsa_input.usb-Creative_Technology_Ltd_Sound_Blaster_Play__3_00252407-00.analog-stereo sink=recording &
exec chromium https://translation.home.local/english &
exec parecord --channels=2 -d recording.monitor /home/pi/output.wav &

# Test with soundcard and soundlibrary
import soundcard as sc
default_mic = sc.default_microphone()
default_mic
# Record the data from the MIC - together while used by Chromium
data = default_mic.record(samplerate=44100, numframes=441000, channels=2)
import numpy
default_speaker.play(data/numpy.max(data), samplerate=44100,channels=2)
# Write to the file in WAV
import soundfile
#f = open("./soundcard.dat", 'wb')
#f.write(data)
soundfile.write("./soundcard.wav", data, 44100)

# Test without limit - Hang the RP
with default_mic.recorder(samplerate=44100,channels=2) as mic:
    data = mic.record()
    soundfile.write("./soundcard.wav", data, 44100)


# Add Jitsi SSL cert
## Nginx config
New file /etc/nginx/sites-available/translation.sennsolution.com.conf with the new domain


## Cert copied in Jitsi folder following the one configured in the nginx config file
scp ~/letsencrypt/archive/translation.sennsolutions.com/fullchain1.pem pi@translation.home.local:/tmp/ 	# from bigone
mv /tmp/fullchain1.pem /etc/ssl/translation.sennsolutions.com.crt				# on translation

scp ~/letsencrypt/archive/translation.sennsolutions.com/privkey1.pem pi@translation.home.local:/tmp/		# from bigone
mv /tmp/privkey1.pem /etc/ssl/translation.sennsolutions.com.key					# on translation

## Create a new Jitsi config
	vi /etc/jitsi/meet/translation.senncolutions.com-config.js
with all the domain changed

## Update all Jitsi config
cd /etc/jitsi
sed -i=bck 's/home\.local/sennsolutions\.com/' jibri/jibri.conf jicofo/config jicofo/jicofo.conf videobridge/sip-communicator.properties videobridge/config videobridge/jvb.conf

## Update Prosodi
cd /etc/prosody
sed': sed -i.bck 's/translation\.home\.local/translation\.sennsolutions\.com/g' prosody.cfg.lua
cd conf.avail
create a file /etc/prosody/conf.avail/translation.sensolutions.com.cfg.lua with all the domain changed
sed': sed -i.bck 's/translation\.home\.local/translation\.sennsolutions\.com/g' translation.sensolutions.com.cfg.lua
cd ../conf.d
ln -s /etc/prosody/conf.avail/translation.sensolutions.com.cfg.lua

## create the prosody cert
cd /etc/prosody/certs
make translation.sennsolutions.com.cnf
make translation.sennsolutions.com.key
make translation.sennsolutions.com.cnf.csr
make translation.sennsolutions.com.cnf.crt
mv translation.sennsolutions.com.cnf.crt translation.sennsolutions.com.crt
mv translation.sennsolutions.com.cnf.key translation.sennsolutions.com.key
mv translation.sennsolutions.com.cnf.csr translation.sennsolutions.com.csr

Restart Jitsi

##Enable the NGINX config
cd /etc/nginx/sites-enabled
ln -s /etc/nginx/sites-available/translation.sennsolution.com.conf
rm translation.home.local.conf
systenctl restar nginx

---CONTINUE HERE---

# CLI client
https://github.com/fklement/jitsi-cli
https://github.com/ryanprior/meet
https://jitsi.github.io/handbook/docs/dev-guide/dev-guide-iframe-commands/
https://www.npmjs.com/package/jitsi


## Evolution realtime audio
https://wiki.linuxaudio.org/wiki/raspberrypi

# To sort
https://jitsi.github.io/handbook/docs/devops-guide/devops-guide-quickstart/#add-the-jitsi-package-repository
https://jitsi.github.io/handbook/docs/faq/
https://gist.github.com/krithin/e50a6001c8435e46cb85f5c6c78e2d66
https://community.jitsi.org/t/configuring-audio-in-meet-jit-si/33227
https://discourse.ubuntu.com/t/how-to-install-ubuntu-server-on-your-raspberry-pi/14660
http://blog.scphillips.com/posts/2013/01/sound-configuration-on-raspberry-pi-with-alsa/
https://www.bujarra.com/permitiendo-grabaciones-y-streaming-en-jitsi-con-jibri/?lang=en
https://webrtchacks.com/the-ultimate-guide-to-jitsi-meet-and-jaas/
https://www.linuxcapable.com/install-chromium-browser-on-ubuntu-linux/
https://github.com/jitsi/jibri/issues/409 -  Please clarify if chromium can be used instead of chrome #409 
https://makersportal.com/blog/2018/8/23/recording-audio-on-the-raspberry-pi-with-python-and-a-usb-microphone
https://forums.raspberrypi.com/viewtopic.php?t=37873 - [SOLVED] ALSA/C-Media USB sound card issues
https://raspberrypi.stackexchange.com/questions/11866/how-can-i-start-x11-only-for-a-single-application
https://unix.stackexchange.com/questions/281858/difference-between-xinitrc-xsession-and-xsessionrc
https://forum.manjaro.org/t/error-opening-pcm-device-front-device-or-resource-busy-dummy-output/83719
https://askubuntu.com/questions/60837/record-a-programs-output-with-pulseaudio
https://gist.github.com/varqox/c1a5d93d4d685ded539598676f550be8
https://github.com/bastibe/SoundCard
https://soundcard.readthedocs.io/en/latest/
https://github.com/bastibe/SoundCard/issues/133 -  'import soundcard' throws an error when run through a systemd service #133 
https://serverspace.io/support/help/install-tightvnc-server-on-ubuntu-20-04/
https://unix.stackexchange.com/questions/478742/error-when-trying-to-use-xorg-only-console-users-are-allowed-to-run-the-x-serve
https://www.raspberrypi.com/software/operating-systems/#raspberry-pi-os-32-bit
https://makersportal.com/blog/2018/8/23/recording-audio-on-the-raspberry-pi-with-python-and-a-usb-microphone


# Reinstall Jitsi
				      ┌─────────────────────┤ Configuring jitsi-videobridge2 ├──────────────────────┐                                       
                                      │ The value of the domain that is set in the Jitsi Videobridge installation.  │                                       
                                      │                                                                             │                                       
                                      │ The domain of the current installation (e.g. meet.jitsi.com):               │                                       
                                      │                                                                             │                                       
                                      │ translation.sennsolutions.com______________________________________________ │                                       
                                      │                                                                             │                                       
                                      │                                   <Ok>                                      │                                       
                                      │                                                                             │                                       
                                      └──────────────────────────────────────────────────────────────────

                      ┌────────────────────────────────────┤ Configuring jitsi-meet-web-config ├────────────────────────────────────┐                       
                      │ The full path to the SSL key file on the server. If it has not been uploaded, now is a good time to do so.  │                       
                      │                                                                                                             │                       
                      │ Full local server path to the SSL key file:                                                                 │                       
                      │                                                                                                             │                       
                      │ /etc/ssl/translation.sennsolutions.com.key_________________________________________________________________ │                       
                      │                                                                                                             │                       
                      │                                                   <Ok>                                                      │                       
                      │                                                                                                             │                       
                      └─────────────────────────────────────────────────────────────────────────────────────────────────────────────┘                       
    
       ┌───────────────────────────────────────────────────┤ Configuring jitsi-meet-web-config ├───────────────────────────────────────────────────┐        
       │ The full path to the SSL certificate file on the server. If you haven't uploaded it, now is a good time to upload it in another console.  │        
       │                                                                                                                                           │        
       │ Full local server path to the SSL certificate file:                                                                                       │        
       │                                                                                                                                           │        
       │ /etc/ssl/translation.sennsolutions.com.crt_______________________________________________________________________________________________ │        
       │                                                                                                                                           │        
       │                                                                  <Ok>                                                                     │        
       │                                                                                                                                           │        
       └───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘        
    
 ┌─────────────────────────────────────────────────────────┤ Configuring jitsi-meet-web-config ├─────────────────────────────────────────────────────────┐  
 │                                                                                                                                                       │  
 │ You can easily add dial-in support to your meetings. To allow this we would need your permission to create a free JaaS (Jitsi as a Service) account   │  
 │ for you.                                                                                                                                              │  
 │                                                                                                                                                       │  
 │ Add telephony to your Jitsi meetings?                                                                                                                 │  
 │                                                                                                                                                       │  
 │                                              <Yes>                                                 <No>                                               │  
 │                                                                                                                                                       │  
 └───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘  
   

# Install Pihole unattended
create the file /etc/pihole/setupVars.conf 
WEBPASSWORD=0e69e6a4038df88d4c62c837edd7e04a95ea6368bca9d469e00ad766a2266770
PIHOLE_INTERFACE=wlan0
IPV4_ADDRESS=192.168.178.190
IPV6_ADDRESS=2a04:ee41:4:7225:e65f:1ff:fe3a:b7e
QUERY_LOGGING=true
INSTALL_WEB=true
DNSMASQ_LISTENING=local
DNS_FQDN_REQUIRED=true
DNS_BOGUS_PRIV=true
DNSSEC=true
TEMPERATUREUNIT=C
WEBUIBOXEDLAYOUT=traditional
API_QUERY_LOG_SHOW=all
API_PRIVACY_MODE=false
INSTALL_WEB_SERVER=false
INSTALL_WEB_INTERFACE=true
LIGHTTPD_ENABLED=true
CACHE_SIZE=10000
BLOCKING_ENABLED=true
REV_SERVER=false
PIHOLE_DNS_1=127.0.0.1
PIHOLE_DNS_2=127.0.0.1

Encode the pw with: echo -n P@ssw0rd | sha256sum | awk '{printf "%s",$1 }' |sha256sum

Run with: curl -sSL https://install.pi-hole.net | bash /dev/stdin --unattended

Add the IP translation.sennsolution.com addresses for both IPV4 and IPV6

# pihole admin page
http://10.0.0.2:8989/admin/login.php


MTU 1472 if goinh through 192.168.178.2 <----Removed DGW to 192.168.178.2 on translation.home.local

With a proxy all the traffic flow correctly

mkdir /var/log/tinyproxy && chown tinyproxy:tinyproxy /var/log/tinyproxy

With the default version shipped (1.11.0-1) on Ubuntu 22.0.4 tinyproxy do not start on boot. No way to make it working.
Updated to the latest stable version:
See https://debian.pkgs.org/sid/debian-main-arm64/tinyproxy-bin_1.11.1-2.1_arm64.deb.html

Package:
http://ftp.de.debian.org/debian/pool/main/t/tinyproxy/tinyproxy-bin_1.11.1-2.1_arm64.deb
http://ftp.de.debian.org/debian/pool/main/t/tinyproxy/tinyproxy_1.11.1-2.1_all.deb

Also the Listen option to the Wlan address broke the correct startup. Unknown reason

# Add the proxy pac

# SETUP a proper dhcp server to give the correct config.

# How to mute All
with jitsi/react-sdk


# https://www.digitalocean.com/community/tutorials/how-to-install-node-js-on-ubuntu-20-04
# Run from the user that will run the app

curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash
source  ~/.bashrc
nvm install v18.15.0

npm i @jitsi/react-sdk 
npm i react-dom@17
npm i react@17.0.2
npm install -g create-react-app
npm install --global serve

Great node backend + React App guide:
https://www.freecodecamp.org/news/how-to-create-a-react-app-with-a-node-backend-the-complete-guide/

How to add CSS to a reactapp
https://www.w3schools.com/howto/howto_css_two_columns.asp
https://css-tricks.com/different-ways-to-write-css-in-react/

# Reconnect to jitsi with a simple page refresh
https://webtips.dev/solutions/refresh-page-in-react

# Just a test app
npx create-react-app my-app
cd my-app/
npm start

# The modified app with Mute-All
git clone https://github.com/jitsi/jitsi-meet-react-sdk.git
cd jitsi-meet-react-sdk/example
cd ~/github/Raspberry-PI/Translation_System/misc/jitsi-meet-react-sdk/example - Bigone
npm start

## How to copy the software from my Development workstation to the RP
cd /home/asurace/github/Raspberry-PI/Translation_System/misc/jitsi_gemeinde_frontend
npm run build && scp -r build/* pi@translation.sennsolutions.com:/home/pi/translation_system/jitsi_gemeinde_frontend/build/

cd /home/asurace/github/Raspberry-PI/Translation_System/misc/jitsi_gemeinde_backend
scp -r ../jitsi_gemeinde_backend/ pi@translation.sennsolutions.com:/home/pi/translation_system/
npm build
# To run test
npm start

# Limit journal
vi /etc/systemd/journald.conf
SystemMaxUse=100M

# Mount LCD img
See https://lindevs.com/mount-raspberry-pi-os-image-in-linux

cd /home/asurace/github/Raspberry-PI/Translation_System/misc/Hardware/LCD/
fdisk -l 2022-01-28-raspios-bullseye-armhf_rb-tft35_autoexpand.img
export img=2022-01-28-raspios-bullseye-armhf_rb-tft35_autoexpand.img
MOUNT_OFFSET_1=$(fdisk -l raspios.img | grep ${img}1 | awk '{print $2 * 512}')
MOUNT_OFFSET_1=$(fdisk -l $img | grep ${img}1 | awk '{print $2 * 512}')
echo $MOUNT_OFFSET_1 
MOUNT_OFFSET_2=$(fdisk -l $img | grep ${img}2 | awk '{print $2 * 512}')
echo $MOUNT_OFFSET_2
MOUNT_SIZE_1=$(fdisk -l $img | grep ${img}1 | awk '{print $4 * 512}')
MOUNT_SIZE_2=$(fdisk -l $img | grep ${img}2 | awk '{print $4 * 512}')
sudo mkdir -p /mnt/rpi/img1 /mnt/rpi/img2
sudo mount -o offset=$MOUNT_OFFSET_1,sizelimit=$MOUNT_SIZE_1 $img /mnt/rpi/img1
sudo mount -o offset=$MOUNT_OFFSET_2,sizelimit=$MOUNT_SIZE_2 $img /mnt/rpi/img2


# LCD Touch display
Follow setup here: https://github.com/lcdwiki/LCD-show-ubuntu

	sudo rm -rf LCD-show-ubuntu
	git clone https://github.com/lcdwiki/LCD-show-ubuntu.git
	chmod -R 755 LCD-show-ubuntu
	cd LCD-show-ubuntu/
	sudo ./LCD35-show

To allow to start X from pi
See https://gist.github.com/alepez/6273dc5220c1c5ec5f3f126e739d58bf

	Edit /etc/X11/Xwrapper.config
	allowed_users=anybody
	needs_root_rights=yes


# Disable audit logs
systemctl stop systemd-journald-audit.socket
systemctl disable  systemd-journald-audit.socket

# Disable all not needed service
service --status-all | grep '\[ + \]'
systemctl stop service_name
systemctl disable service_name

# Swap file not enabled. Not enough disk space --> install on a 32 Gb?

# Auto start X for pi user
https://forums.raspberrypi.com/viewtopic.php?t=313824#p1877540

Created service pi_session.service to start an Xsession with vncviewer

# Do not start the browser on `npm start`
https://stackoverflow.com/questions/61927814/how-to-disable-open-browser-in-cra

to avoid crash with multiple browser start

# QRCODE generator
https://www.the-qrcode-generator.com/ for jitsi

# QRCODE for the wifi:
https://www.qrcode-tiger.com/?type=wifi

##########################################################
# Temp test at home with the RPI acting as a router
ip r del default via 10.0.0.1
ifconfig eth0:1 192.168.178.155 netmask 255.255.255.0
ip r add default via 192.168.178.1 dev eth0
--> To test LiveVoice

Update also the pihole DNS to point temporary to the DNS 192.168.178.1
##########################################################



# Configured UFW to MASQUAREADE all the traffic in output from eth0 - Needed to make livevoice working simultanuosly
https://gist.github.com/kimus/9315140
See for sure /etc/default/ufw /etc/ufw/sysctl.conf  and /etc/ufw/before.rules 

# TODO
- LCD goes blank
- Become a Moderator Button
- wpad improvements?
- Shutdown confirmation
- Unmute myself
